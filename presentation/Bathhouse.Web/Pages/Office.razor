@using Bathhouse.Models
@page "/Office"
@inject HttpClient Http

<h1>Подразделения</h1>
<h2>@editItem.TimeOfClose</h2>



@if (offices == null)
{
  <p>У Вас еще нет подразделений для управления</p>
}
else
{
  <table class="table">
    <thead>
      <tr>
        <th>Номер</th>
        <th>Телефон</th>
        <th>Адрес</th>
        <th>Время работы</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr id="editRow" style="display:@editRowStyle">
        <td>
          <input @bind="editItem.Number" type="number"/>
        </td>
        <td>
          <input @bind="editItem.Phone" type="tel"/>
        </td>
        <td>
          <input @bind="editItem.Address" />
        </td>
        <td>
          <input @bind="editItem.TimeOfOpen" type="time"/>
        </td>
        <td>
          <input @bind-value="editItem.TimeOfClose" type="time" />
        </td>
        <td class="text-center">
          <button class="btn btn-success" @onclick="@SaveItem">Сохранить</button>
          <button class="btn btn-danger" @onclick="@(() => editRowStyle = "none")">Отменить</button>
        </td>
      </tr>
      @foreach (var item in offices)
      {
    <tr>
      <td>@item.Number</td>
      <td>@item.Phone</td>
      <td>@item.Address</td>
      <td>@item.WorkingTimeRange</td>
      <td class="text-center">
        <button class="btn btn-warning" @onclick="@(() => EditItem(item.Id))">Редактировать</button>
        <button class="btn btn-danger" @onclick="@(async () => await DeleteItem(item.Id))">Удалить</button>
      </td>
    </tr>
      }
    <tr id="addRow">
      <td>
        <input @bind="editItem.Number"  type="number" placeholder="Номер новой аптеки" />
      </td>
      <td>
        <input @bind="editItem.Phone" type="tel" placeholder="Телефон новой аптеки" />
      </td>
      <td>
        <input @bind="editItem.Address" placeholder="Адрес новой аптеки" />
      </td>
      <td>
        <input @bind="editItem.TimeOfOpen" type="time"  placeholder="Время открытия" />
      </td>
      <td>
        <input @bind="editItem.TimeOfClose" type="time" placeholder="Время закрытия" />
      </td>
      <td class="text-center">
        <button class="btn btn-success" @onclick="@AddItem">Добавить</button>
      </td>
    </tr>
    </tbody>
  </table>
}



@code {

  private const string ServiceEndpoint = "https://localhost:5001/Office";
  private OfficeModel[] offices;
  private OfficeModel editItem = new OfficeModel();
  private string editRowStyle = "none";


  protected override async Task OnInitializedAsync() => await GetOffices();

  private async Task GetOffices() => offices = await Http.GetFromJsonAsync<OfficeModel[]>(ServiceEndpoint);

  private void EditItem(Guid id)
  {
    editItem = offices.Single(i => i.Id == id);
    editRowStyle = "table-row";
  }

  private async Task AddItem()
  {
    await Http.PostAsJsonAsync(ServiceEndpoint, editItem);
    editItem = new OfficeModel();
    editItem.TimeOfOpen =  DateTime.MinValue.AddHours(8);
    editItem.TimeOfClose = DateTime.MinValue.AddHours(22);
    await GetOffices();
    editRowStyle = "none";
  }

  private async Task SaveItem()
  {

    await Http.PutAsJsonAsync($"{ServiceEndpoint}/{editItem.Id}", editItem);
    await GetOffices();
    editRowStyle = "none";
  }

  private async Task DeleteItem(Guid id)
  {
    await Http.DeleteAsync($"{ServiceEndpoint}/{id}");
    await GetOffices();
    editRowStyle = "none";
  }



}
